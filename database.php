<?php
/*
Holds functions pertaining to the database
*/
require_once "./config.php";

class Database
{
	/*
		Creates a connection to the database if it does not already exist
		If a connection exists then return that connection
	*/
	public static function connect()
	{
		//$conn holds the connection to the database if it has been opened already
		//otherwise, a connection is created and $conn points to that connection
		static $conn;

		//If there is already an existing connection, return that connection
		if ( $conn )
			return $conn;

		$dbName = Config::$DB_NAME;
		$dbUser = Config::$DB_USER;
		$dbPass = Config::$DB_PASS;
		$dbHost = Config::$DB_HOST;
		$dataSrc = "mysql:host={$dbHost};dbname={$dbName}";
		try 
		{
			//create the connection with the parameters given
			$conn = new PDO( $dataSrc, $dbUser , $dbPass );
			//make associative arrays the default so that $stmt->fetch() doesn't need PDO::FETCH_ASSOC every time
			$conn->setAttribute( PDO::ATTR_DEFAULT_FETCH_MODE, PDO::FETCH_ASSOC );
		} 
		catch ( PDOException $e ) 
		{
			self::logError( "Error establishing Connection\n{$e->getMessage()}\n" );
			exit();
		}

		return $conn;
	}

	/*
		Writes the message provided to the error log.
		If fail is true(by default), also stops more code from running.
		If the config constant LOG_TO_FILE is false then the message is displayed to the page as html(sanitized).
	*/
	public static function logError( $message, $fail = TRUE )
	{
		error_log( $message );
		if ( $fail )
		{
			exit();
		}
	}

	/*
		Generates a random token for CSRF prevention.
		Length is the number of bytes that will be generated.
		Returns the hexadecimal representation of the generated bytes as a string.
	*/
	public static function randomToken( $length = 32 )
	{
		$strong = false;
		$bytes = openssl_random_pseudo_bytes( $length, $strong );
		//if strong is false, then the bytes were not generated with a cryptographically strong algorithm
		//	if that is the case, then error out
		if ( $strong !== true )
		{
			self::logError( "Could not generate secure token\n" );
			exit();			
		}

		return bin2hex( $bytes );
	}

	/*
		Sanitizes the input given to prevent XSS.
	*/
	public static function sanitizeData( $str )
	{
		return htmlspecialchars( $str, ENT_QUOTES, 'UTF-8', false);		
	}

	/*
		Reverts the input given back to its original form, meaning any HTML tags will be there.
	*/
	public static function unsanitizeData( $str )
	{
		return ( htmlspecialchars_decode( $str, ENT_QUOTES ) );
	}

	/*
		Returns the hashed value of the token provided.
	*/
	public static function hashToken( $token )
	{
		return hash( "sha512" , $token, FALSE );
	}

	/*
		Returns true if the token matches the hashed provided or false otherwise.
	*/
	public static function hashVerify( $hashed, $token )
	{
		return ( self::hashToken( $token ) === $hashed );
	}

	/*
		Inserts a user into the editors table in the database.
		Uses the netID provided as the username.
		Returns the id of the user that was inserted.
	*/
	public static function createEditor( $netID )
	{
		$username = Database::sanitizeData( strtolower( $netID ) );
		$conn = self::connect();
		$stmt = $conn->prepare( "INSERT INTO Editors( username ) values( :username )" );
		$stmt->bindParam( "username" , $username );
		$stmt->execute();	
		return $conn->lastInsertId();	
	}

	/*
		Returns true if the user with the username provided exists in the Editors table, or false otherwise.
	*/
	public static function doesEditorExist( $username )
	{
		$username = self::sanitizeData( strtolower( $username ) );
		$conn = self::connect();
		$stmt = $conn->prepare( "SELECT id FROM Editors WHERE username=:username" );
		$stmt->bindParam( "username" , $username ); 
		$stmt->execute();
		$row = $stmt->fetch();
		return isset( $row[ "id" ] );
	}

	/*
		Creates a link with the parameters specified.
	*/
	public static function createLink( $title, $href, $placement )
	{
		$href = urlencode( $href );
		$title = self::sanitizeData( $title );
		$args = array( $title, $href, $placement );
		$conn = self::connect();
		$stmt = $conn->prepare( "INSERT INTO Links( title, link, placement ) VALUES( ? , ? , ? )" );
		$stmt->execute( $args );		
		return $conn->lastInsertId();	
	}

	/*
		Returns all links that have placement value of provided.
		So for example, to get all social media links: Database::getLinksByPlacement( "social" );
		Or, to get all the links for the bottom of the club page: Database::getLinksByPlacement( "bottom" ); 
	*/
	public static function getLinksByPlacement( $placement )
	{
		$placement = strtolower( $placement );
		$args = array( $placement );
		$conn = self::connect();
		$stmt = $conn->prepare( "SELECT * FROM Links WHERE placement=?" );
		$stmt->execute( $args );
		return $stmt->fetchAll();
	}

	/*
		Returns an array of key value pairs.
		Keys are the social media sites, i.e facebook,twitter...
		Values are the links to the club profiles on these sites
	*/
	public static function getSocialLinks()
	{
		$toReturn = array();
		$links = Database::getLinksByPlacement( "social" );
		foreach( $links as $row )
		{
			$key = $row[ "title" ];
			$toReturn[ $key ] = $row[ "link" ];
		}
		return $toReturn;
	}

	/*
		Updates the social media link with the title provided to the link provided.
	*/
	public static function updateSocialLink( $title, $link )
	{
		$link = urlencode( $link );
		$placement = "social";
		$title = strtolower( $title );
		$args = array( $link, $placement, $title );
		$conn = self::connect();
		$stmt = $conn->prepare( "UPDATE Links SET link=? WHERE placement=? AND title=?" );
		$stmt->execute( $args );
		return TRUE;
	}

	/*
		Updates the featured item with the id provided to the parameters given as title and link.
		Title should be the image name for the featured item.
		Link should be the link that user goes to when clicking on the image.
	*/
	public static function updateFeatured( $id, $title, $link )
	{
		$link = urlencode( $link );
		$placement = "featured";
		$title = Database::sanitizeData( $title );
		$args = array( $link, $title, $placement, $id );
		$conn = self::connect();
		$stmt = $conn->prepare( "UPDATE Links SET link=?,title=? WHERE placement=? AND id=?" );
		$stmt->execute( $args );
		return TRUE;
	}

	/*
		Returns an array of the featured links for the club page.
	*/
	public static function getFeatured()
	{	
		return Database::getLinksByPlacement( "featured" );
	}

	/*
		Creates an article with the parameters specified.
		imageURL should be a url to allow flexibility for using images on other sites, not just uploaded ones.
	*/
	public static function createArticle( $title, $author, $body, $imageURL )
	{
		$title = self::sanitizeData( $title );
		$author = self::sanitizeData( $author );
		$body = self::sanitizeData( $body );
		$imageURL = urlencode( $imageURL );
		$args = array( $title, $author, $body, $imageURL );
		$stmt = $conn->prepare( "INSERT INTO Articles( title, author, body, uploadDate, image) VALUES( ? , ?, ? , CURDATE(), ? )" );
		$stmt->execute( $args );		
		return $conn->lastInsertId();	
	}

	/*
		Gets the information for a specific article with the id supplied.
	*/
	public static function getArticleByID( $id )
	{
		$conn = self::connect();
		$args = array( $id );
		$stmt = $conn->prepare( "SELECT * FROM Articles WHERE id=?" );
		$stmt->execute( $args );
		return $stmt->fetchAll();
	}

	/*
		Gets an array of all the articles, sorted by most recent first.
	*/
	public static function getAllArticles()
	{
		$conn = self::connect();
		$stmt = $conn->prepare( "SELECT * FROM Articles ORDER BY id DESC" );
		$stmt->execute();
		return $stmt->fetchAll();
	}

	/*
		Deletes the article with the id provided.
		Returns the error code that occured, 00000 if ok.
	*/
	public static function removeArticle( $id )
	{
		$args = array( $id );
		$conn = self::connect();
		$stmt = $conn->prepare( "DELETE FROM Articles WHERE id=?" );
		$stmt->execute( $args );
		return $stmt->errorCode();
	}

	/*
		Creates about text in the database with the parameters provided.
	*/
	public static function createAbout( $body )
	{
		$body = self::sanitizeData( $body );
		$args = array( $body );
		$stmt = $conn->prepare( "INSERT INTO About( body ) VALUES( ? )" );
		$stmt->execute( $args );		
		return $conn->lastInsertId();	
	}

	/*
		Returns an array containing the text for the about container on the club page.
	*/
	public static function getAbout()
	{
		$conn = self::connect();
		$stmt = $conn->prepare( "SELECT * FROM Articles ORDER BY id DESC LIMIT 1" );
		$stmt->execute();
		return $stmt->fetch();
	}

	/*
		Returns the basename of the fileName provided, excluding the extension.
		Replaces any non-alphanumeric characters with underscores, examples . .. /
		If the fileName does not have an extension then this will still work.
		IMPORTANT: Do not use the filename provided by users for naming the file on the server.
			This should only be used for the file name for downloading the file.
			See getUploadPath function in database.php for the name of the notes file on the server.
	*/
	public static function sanitizeFileName( $fileName )
	{
		$fileParts = explode( ".", basename( $fileName ) );
		if ( count( $fileParts ) > 1 )
		{
			array_pop( $fileParts );
			$fileName = end( $fileParts );
		}
		return preg_replace('/[^A-Za-z0-9_\-]/', '_', $fileName );
	}


}
?>
